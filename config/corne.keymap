/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        Gaming {
            bindings = <&to 3>;
            key-positions = <37 41>;
            layers = <0>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };
    };

    macros {
        VSC_Search: VSC_Search {
            compatible = "zmk,behavior-macro";
            label = "VSC_SEARCH";
            #binding-cells = <0>;
            bindings = <&kp LEFT_CONTROL &kp P>;
        };
        VSC_Cmd_Srch: VSC_Cmd_Srch {
            compatible = "zmk,behavior-macro";
            label = "VSC_CMD_SRCH";
            #binding-cells = <0>;
            bindings = <&kp LEFT_CONTROL &kp LEFT_SHIFT &kp P>;
        };
        macro_e: macro_e {
            compatible = "zmk,behavior-macro";
            label = "MACRO_E";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp NUMBER_2 &kp NUMBER_3 &kp NUMBER_3>,
                <&macro_release>,
                <&kp LEFT_ALT>;
        };
        macro_e_maj: macro_e_maj {
            compatible = "zmk,behavior-macro";
            label = "MACRO_E_MAJ";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp NUMBER_2 &kp NUMBER_0 &kp NUMBER_1>,
                <&macro_release>,
                <&kp LEFT_ALT>;
        };
    };

    behaviors {
        mo_tog: mo_tog {
            compatible = "zmk,behavior-hold-tap";
            label = "MO_TOG";
            bindings =
                <&mo>,
                <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
        hold_sticky: hold_sticky {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_STICKY";
            bindings =
                <&kp>,
                <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
        test: test {
            compatible = "zmk,behavior-mod-morph";
            label = "TEST";
            bindings =
                <&kp LBKT>,
                <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
        };
        lorem_test: lorem_test {
            compatible = "zmk,behavior-mod-morph";
            label = "LOREM_TEST";
            bindings =
                <&behav_e E undefined>,
                <&behav_e_maj E undefined>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
        behav_e: behav_e {
            compatible = "zmk,behavior-hold-tap";
            label = "BEHAV_E";
            bindings =
                <&kp>,
                <&macro_e>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
        behav_e_maj: behav_e_maj {
            compatible = "zmk,behavior-hold-tap";
            label = "BEHAV_E_MAJ";
            bindings =
                <&kp>,
                <&macro_e_maj>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
        new_behavior: new_behavior {
            compatible = "zmk,behavior-mod-morph";
            label = "NEW_BEHAVIOR";
            bindings =
                <&kp LEFT_BRACKET>,
                <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Default {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
         &kp TAB  &kp A  &kp Z     &kp E        &kp R                             &kp T        &kp Y          &kp U          &kp I      &kp O            &kp P       &kp ESCAPE
  &kp LEFT_SHIFT  &kp Q  &kp S     &kp D        &kp F                             &kp G        &kp H          &kp J          &kp K      &kp L            &kp M        &kp ENTER
&kp LEFT_CONTROL  &kp Z  &kp X     &kp C        &kp V                             &kp B        &kp N      &kp COMMA  &kp SEMICOLON  &kp COLON  &kp EXCLAMATION  &kp RIGHT_SHIFT
                                &kp LGUI  &mo_tog 2 2  &hold_sticky LEFT_ALT LEFT_SHIFT    &kp SPACE  &kp BACKSPACE    &mo_tog 1 1
            >;
        };

        Num+Sym {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
         &none  &kp EXCLAMATION      &kp AT_SIGN         &kp HASH       &kp DOLLAR                       &kp PERCENT         &kp CARET  &kp AMPERSAND             &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS    &kp BACKSLASH
&kp LEFT_SHIFT  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_NUMBER_4                   &kp KP_NUMBER_5    &kp UNDERSCORE      &kp EQUAL  &mt GRAVE DOUBLE_QUOTES      &kp LEFT_BRACKET      &kp RIGHT_BRACKET         &kp PIPE
         &none  &kp KP_NUMBER_6  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9                   &kp KP_NUMBER_0         &kp MINUS       &kp PLUS                &kp TILDE        &kp LEFT_BRACE        &kp RIGHT_BRACE  &kp RIGHT_SHIFT
                                                         &kp LGUI      &mo_tog 2 2  &hold_sticky LEFT_ALT LEFT_SHIFT         &kp SPACE  &kp BACKSPACE              &mo_tog 0 0
            >;
        };

        FKey+Nav {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
           &none      &kp F1        &kp F2        &kp F3        &kp F4                            &kp F5       &kp F6          &kp F7          &kp F8           &kp F9      &kp F10          &none
  &kp LEFT_SHIFT  &kp C_PREV    &kp C_NEXT  &kp C_VOL_DN  &kp C_VOL_UP                  &kp C_PLAY_PAUSE        &none           &none    &kp UP_ARROW    &new_behavior  &VSC_Search  &VSC_Cmd_Srch
&kp LEFT_CONTROL  &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2                      &bt BT_SEL 3        &none  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &lorem_test          &test
                                                &kp LGUI   &mo_tog 0 0  &hold_sticky LEFT_ALT LEFT_SHIFT    &kp SPACE   &kp BACKSPACE     &mo_tog 1 1
            >;
        };

        Gaming {
            bindings = <
         &kp TAB  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5    &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0  &kp ESCAPE
  &kp LEFT_SHIFT         &kp A         &kp Z         &kp E         &kp R         &kp T           &kp Y         &kp U         &kp I         &kp O         &kp P       &none
&kp LEFT_CONTROL         &kp Q         &kp S         &kp D         &kp F         &kp G           &kp H         &kp J         &kp K         &kp L         &kp M       &none
                                              &lt 0 ESCAPE  &kp LEFT_ALT     &kp SPACE           &none         &none         &none
            >;
        };
    };
};
